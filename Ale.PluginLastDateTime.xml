<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (SUSE Linux Enterprise Server for x86-64) 2017.2.1 (Build 801)" ts="2018-08-15 11:36:59">
<Class name="Ale.PluginLastDateTime">
<Description>
Ale.PluginLastDateTime
This DeepSee Plugin returns the property of one single fact. 
The fact is, within the context of a cell, the one whose source record has the latest datetime stamp. 
The datetime stamp is indicated in the "datetimestamp" parameter and it must be a field of the source 
class in this format: 'YYY-MM-DD HH:MM:SS'. 
Examples: the PATIENTS cube in SAMPLES has a BirthDateTimeStamp field. The following call will return 
the most recent BirthDateTimeStamp time stamp:
%KPI("PluginLastDateTime","LastDateTime",1,"datetimestamp","BirthDateTimeStamp","%CONTEXT")
You can create a calculated measure with the expression above</Description>
<Super>%DeepSee.KPIPlugIn</Super>
<TimeChanged>64875,41801.145326</TimeChanged>
<TimeCreated>64875,41288.622035</TimeCreated>

<Parameter name="BASECUBE">
<Description>
Cube(s) that this plug-in is based on.</Description>
<Default>*</Default>
</Parameter>

<Parameter name="LISTINGSOURCE">
<Description>
SourceTable</Description>
<Default>SourceTable</Default>
</Parameter>

<Parameter name="PLUGINTYPE">
<Default>Pivot</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="PluginLastDateTime" displayName="PluginLastDateTime" caption="PluginLastDateTime" >
<filter name="%cube" displayName="Subject Area"/>
<filter name="%datetimestamp" displayName="datetimestamp" description="Field of source record to be returned as output"/>
<property name="LastDateTime" displayName="LastDateTime" description="" />

</kpi>
]]></Data>
</XData>

<Method name="%OnGetMDX">
<Description>
Get the base query for this plug-in.</Description>
<FormalSpec><![CDATA[&pMDX:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tBaseCube = ""
	// Use %cube filter to find the base cube
	If $IsObject(..%filterValues) {
		If (..%filterValues.%cube'="") {
			Set tBaseCube = ..%filterValues.%cube
		}
	}
	If (tBaseCube'="") {
		Set pMDX = "SELECT FROM "_tBaseCube
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetListingFields">
<Description>
Returns the field list (RETURN clause) of the listing used to supply data for this plug-in.
In this case, determine which field in the source table we need.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tListingFields = "'ERROR:No datetimestamp' datetimestamp"
	If $IsObject(..%filterValues) {
		If (..%filterValues.%data("datetimestamp")'="") {		
			Set tdatetimestamp = ..%filterValues.%data("datetimestamp")
			Set tListingFields = tdatetimestamp _ " datetimestamp"
		}
	}
	Quit tListingFields _",%ID ID"  //Also pass the ID in case you want to use it in %OnCompute
]]></Implementation>
</Method>

<Method name="%OnCompute">
<Description>
Compute the value for the last fact using the result set.</Description>
<FormalSpec>pSQLRS:%SQL.StatementResult,pFactCount:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set tValue = ""
		Set tErrMsg = ""
		Set highest = ""
		Set n = 0
		While (pSQLRS.%Next(.tSC)) { 
			If $$$ISERR(tSC) {
				Set tErrMsg = $System.Status.GetErrorText(tSC)
				Quit
			}
	   		//Get the number of seconds from a platform-specific origin date/time. Use that to get the most recent date
	   		//%ID breakes ties in case of identical datetime stamps
	   		Set numSecs = $ZDT($ZDTH(pSQLRS.datetimestamp,3),-2)
	   		if (numSecs >= highest) {
     			Set tValue = pSQLRS.datetimestamp
     			Set highest = $ZDT($ZDTH(pSQLRS.datetimestamp,3),-2)
  			}
			If ($ZSTRIP($P(tValue,":"),"<>W")="ERROR") {
				Set tErrMsg = $P(tValue,":",2)
				Quit
			}
			// update pct complete
			Set n = n + 1
			If (n#100 = 0) {
				Do ..%SetPercentComplete(100*(n/pFactCount))
			}
		}
		// place answer in KPI output
		Set ..%seriesCount = 1
		Set ..%seriesNames(1) = "LastDateTime"
		If (tErrMsg'="") {
			Set ..%data(1,"LastDateTime") = tErrMsg
		} Else {
			Set ..%data(1,"LastDateTime") = tValue
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
