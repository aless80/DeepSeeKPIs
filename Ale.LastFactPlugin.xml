<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (SUSE Linux Enterprise Server for x86-64) 2017.2.1 (Build 801)" ts="2018-08-08 09:39:20">
<Class name="Ale.LastFactPlugin">
<Description>
Ale.LastFactPlugin
This DeepSee Plugin returns the property of one single fact. The fact is, within the context of a cell, the one with the highest ID. 
I use the word "Last" because records in a source table are often added chronologically. 
Example: create a calculated measure with expression: %KPI("LastFactPlugin","LastFact",1,"outputfield","UnitsSold","%CONTEXT")
The example above used with the Holefoods cube in SAMPLES will return the UnitsSold of the fact with the highest ID </Description>
<Super>%DeepSee.KPIPlugIn</Super>
<TimeChanged>64868,34752.031461</TimeChanged>
<TimeCreated>64581,46773.305438</TimeCreated>

<Parameter name="BASECUBE">
<Description>
Cube(s) that this plug-in is based on.</Description>
<Default>*</Default>
</Parameter>

<Parameter name="LISTINGSOURCE">
<Description>
SourceTable</Description>
<Default>SourceTable</Default>
</Parameter>

<Parameter name="PLUGINTYPE">
<Default>Pivot</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="LastFactPlugin" displayName="LastFact" caption="LastFact" >
<filter name="%cube" displayName="Subject Area"/>
<filter name="%outputfield" displayName="outputfield" description="Field of source record to be returned as output"/>
<property name="LastFact" displayName="LastFact" description="" />
</kpi>
]]></Data>
</XData>

<Method name="%OnGetMDX">
<Description>
Get the base query for this plug-in.</Description>
<FormalSpec><![CDATA[&pMDX:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tBaseCube = ""
	// Use %cube filter to find the base cube
	If $IsObject(..%filterValues) {
		If (..%filterValues.%cube'="") {
			Set tBaseCube = ..%filterValues.%cube
		}
	}
	If (tBaseCube'="") {
		Set pMDX = "SELECT FROM "_tBaseCube
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetListingFields">
<Description>
Returns the field list (RETURN clause) of the listing used to supply data for this plug-in.
In this case, determine which field in the source table we need.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// JMD1124 return error by default
	Set tListingFields = "'ERROR:No outputfield' outputfield"
	If $IsObject(..%filterValues) {
		If (..%filterValues.%data("outputfield")'="") {		
			Set toutputfield = ..%filterValues.%data("outputfield")
			Set tListingFields = toutputfield _ " outputfield"
		}
	}
	Quit tListingFields_",%ID ID"  //Also pass the ID in case you want to use it in %OnCompute
]]></Implementation>
</Method>

<Method name="%OnCompute">
<Description>
Compute the vlue for the last fact using the result set.</Description>
<FormalSpec>pSQLRS:%SQL.StatementResult,pFactCount:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set tErrMsg = ""
		While (pSQLRS.%Next(.tSC)) { 
				If $$$ISERR(tSC) {
				Set tErrMsg = $System.Status.GetErrorText(tSC)
				Quit
			}
		
			// Get the last fact added to the table. If unsure check pSQLRS.ID
			Set tValue = pSQLRS.outputfield
			
			If ($ZSTRIP($P(tValue,":"),"<>W")="ERROR") {
				Set tErrMsg = $P(tValue,":",2)
				Quit
			}
		}
		// place answer in KPI output
		Set ..%seriesCount = 1
		Set ..%seriesNames(1) = "LastFact"
		If (tErrMsg'="") {
			Set ..%data(1,"LastFact") = tErrMsg
		} Else {
			Set ..%data(1,"LastFact") = tValue
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
